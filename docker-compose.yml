version: "3"

services:
  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: ${MYSQL_ALLOW_EMPTY_PASSWORD}
      MYSQL_RANDOM_ROOT_PASSWORD: ${MYSQL_RANDOM_ROOT_PASSWORD}
    ports:
      - '3307:3306'
    volumes:
      - mysql_data:/var/lib/mysql/data
      - ./init:/docker-entrypoint-initdb.d

  backend:
    build: ./backend_puppeteer
    container_name: backend
    command: 
      - /bin/sh
      - -c
      - |
        npm install
        node index.js
    volumes:
      - ./backend_puppeteer:/usr/src/app
      - ./backend_puppeteer/node_modules:/usr/src/app/node_modules
    restart: unless-stopped
    ports:
      - 1000:1000
    links:
      - mysql
    depends_on:
      - mysql

  frontend:
    build: ./frontend_react
    container_name: frontend
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: ${POSTGRESQL_DB}
      DB_USER: ${POSTGRESQL_USER}
      DB_PASSWORD: ${POSTGRESQL_PASS}
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_PORT: ${PORT_FRONTEND}
      HTTPS_METHOD: redirect
      PROXY_ADDRESS_FORWARDING: "true" # <==== very important if you use reverse proxy
    restart: unless-stopped
    volumes:
      - ./frontend_react:/usr/src/web
      - ./frontend_react/node_modules:/usr/src/web/node_modules
    depends_on:
      - backend

volumes:
  mysql_data:
  nodemodules: {}

#Use this configuration in production with nginx-proxy container
networks:
  default:
    external:
      name: nginx-proxy